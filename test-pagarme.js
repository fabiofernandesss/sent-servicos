// Script de teste para verificar a integra√ß√£o com a Pagar.me
import fetch from 'node-fetch';

const PROXY_URL = 'http://localhost:3001';

async function testPagarmeIntegration() {
  console.log('üß™ Iniciando testes da integra√ß√£o Pagar.me...\n');

  try {
    // 1. Testar health check
    console.log('1Ô∏è‚É£ Testando health check...');
    const healthResponse = await fetch(`${PROXY_URL}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    console.log('');

    // 2. Testar conex√£o com a API Pagar.me
    console.log('2Ô∏è‚É£ Testando conex√£o com a API Pagar.me...');
    const testResponse = await fetch(`${PROXY_URL}/test-pagarme`);
    const testData = await testResponse.json();
    console.log('‚úÖ Teste API:', testData);
    console.log('');

    // 3. Testar cria√ß√£o de cliente com CPF v√°lido
    console.log('3Ô∏è‚É£ Testando cria√ß√£o de cliente com CPF v√°lido...');
    const customerData = {
      name: 'Jo√£o Silva',
      email: 'joao.silva@teste.com',
      document: '12345678909', // CPF v√°lido para teste
      phone: '11999887766'
    };

    const customerResponse = await fetch(`${PROXY_URL}/api/pagarme/customers`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(customerData)
    });

    const customerResult = await customerResponse.json();
    console.log('‚úÖ Cliente criado:', customerResult);
    console.log('');

    // 4. Testar cria√ß√£o de pedido PIX de R$ 0,05
    console.log('4Ô∏è‚É£ Testando cria√ß√£o de pedido PIX de R$ 0,05...');
    const orderData = {
      customer: customerData,
      amount: 5, // R$ 0,05 em centavos
      description: 'Teste de recarga - R$ 0,05',
      payment_method: 'pix'
    };

    const orderResponse = await fetch(`${PROXY_URL}/api/pagarme/orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orderData)
    });

    const orderResult = await orderResponse.json();
    console.log('‚úÖ Pedido PIX criado:', orderResult);
    console.log('');

    // 5. Testar cria√ß√£o de pedido com cart√£o de R$ 0,05
    console.log('5Ô∏è‚É£ Testando cria√ß√£o de pedido com cart√£o de R$ 0,05...');
    const cardOrderData = {
      customer: customerData,
      amount: 5, // R$ 0,05 em centavos
      description: 'Teste de recarga - R$ 0,05',
      payment_method: 'credit_card',
      card: {
        number: '4111111111111111', // Cart√£o de teste
        holder_name: 'JO√ÉO SILVA',
        exp_month: 12,
        exp_year: 2025,
        cvv: '123'
      }
    };

    const cardOrderResponse = await fetch(`${PROXY_URL}/api/pagarme/orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(cardOrderData)
    });

    const cardOrderResult = await cardOrderResponse.json();
    console.log('‚úÖ Pedido com cart√£o criado:', cardOrderResult);
    console.log('');

    console.log('üéâ Todos os testes passaram com sucesso!');
    console.log('');
    console.log('üìã Resumo:');
    console.log('- ‚úÖ Proxy funcionando');
    console.log('- ‚úÖ API Pagar.me conectada');
    console.log('- ‚úÖ Cliente criado com CPF v√°lido');
    console.log('- ‚úÖ Pedido PIX de R$ 0,05 criado');
    console.log('- ‚úÖ Pedido com cart√£o de R$ 0,05 criado');
    console.log('');
    console.log('üöÄ Sistema pronto para uso!');

  } catch (error) {
    console.error('‚ùå Erro nos testes:', error.message);
    console.log('');
    console.log('üîß Verifique:');
    console.log('1. Se o proxy est√° rodando (npm run proxy)');
    console.log('2. Se as chaves da API est√£o corretas');
    console.log('3. Se a conex√£o com a internet est√° funcionando');
  }
}

testPagarmeIntegration(); 